<?php

namespace Webkul\UVDesk\SupportCenterBundle\Repository;

use Webkul\TicketBundle\Entity\Ticket;
use Webkul\UVDesk\SupportCenterBundle\Entity\MarketingModule;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;
use Doctrine\Common\Collections\Criteria;
use Doctrine\Common\Collections;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * Website
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MarketingModuleRepository extends ServiceEntityRepository
{
    public $safeFields = array('page','limit','sort','order','direction');
    const LIMIT = 10;

    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, MarketingModule::class);
    }
   
    public function getAllMarketingModules(\Symfony\Component\HttpFoundation\ParameterBag $obj = null, $container)
    {
        $json = array();
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('a')->from($this->getEntityName(), 'a');

        $data = $obj->all();
        $data = array_reverse($data);
       
        foreach ($data as $key => $value) {
            if (! in_array($key, $this->safeFields)) {
                if ($key != 'dateUpdated' AND $key != 'dateAdded' AND $key != 'search') {
                    $qb->Andwhere('a.'.$key.' = :'.$key);
                    $qb->setParameter($key, $value);
                } else {
                    if ($key == 'search') {
                        $qb->orwhere('a.title'.' LIKE :name');
                        $qb->setParameter('name', '%'.urldecode(trim($value)).'%');
                        $qb->orwhere('a.description'.' LIKE :description');
                        $qb->setParameter('description', '%'.urldecode(trim($value)).'%');
                    }
                }
            }
        }

        $qb->Andwhere('a.company'.' = :company');
        $qb->setParameter('company',$container->get('user.service')->getCurrentCompany()->getId());

        if (! isset($data['sort'])){
            $qb->orderBy('a.id',Criteria::DESC);
        }

        $paginator  = $container->get('knp_paginator');

        $results = $paginator->paginate(
            $qb,
            isset($data['page']) ? $data['page'] : 1,
            self::LIMIT,
            array('distinct' => false)
        );



        $newResult = [];
        foreach ($results as $key => $result) {
            $newResult[] = array(
                'id'        => $result->getId(),
                'title'     => $result->getTitle(),
                'promoText' => $result->getPromoText(),
                'promoTag'  => $result->getPromoTag(),
                'tagColor'  => $result->getTagColor(),
                'linkText'  => $result->getLinkText(),
                'linkUrl'   => $result->getLinkUrl(),
                'isActive'  => $result->getIsActive(),
                'createdAt' => $result->getCreatedAt(),
                'group'     => array(
                    'id'    => $result->getGroup()->getId(),
                    'name'  => $result->getGroup()->getName()
                )
            );
        }

        $paginationData = $results->getPaginationData();
        $queryParameters = $results->getParams();

        $paginationData['url'] = '#'.$container->get('uvdesk.service')->buildPaginationQuery($queryParameters);

        $json['groups'] = $newResult;
        $json['pagination_data'] = $paginationData;

        return $json;
    }

    public function updateMarketingModule($request, $company, $container)
    {
        if ($request->attributes->get('id')) {
            $marketingModule = $this->findOneBy([
                                    'company' => ($company->getId()),
                                    'id' => $request->attributes->get('id'),
                                ]);
                                
            if ($marketingModule) {
                $marketingModule->setCreatedAt(new \DateTime('now'));          
            }
        } else {
            $marketingModule = new MarketingModule;
            $marketingModule->setCreatedAt(new \DateTime('now'));
        }
            
        if ($request->getMethod() == "POST") {
            $previousImage = $marketingModule->getImage();
            if ($request->files->get('marketingModule_image')) {
                $marketingModule->setImage($request->files->get('marketingModule_image'));
                $marketingModule->upload('Image', $container);
            } else {
                $marketingModule->setImage($previousImage);
            }

            $request = $request->request->get('marketingModule_form');

            $group = $this->getEntityManager()->getRepository('WebkulUserBundle:UserGroup')->find($request['group']);
            $marketingModule->setCompany($company);
            $marketingModule->setTitle($request['title']);
            $marketingModule->setDescription($request['description']);
            $marketingModule->setIsActive($request['status']);
            $marketingModule->setGroup($group);
            $marketingModule->setBorderColor($this->hex2rgb($request['borderColor']));
            $marketingModule->setLinkURL($request['linkURL']);
            
            $this->getEntityManager()->persist($marketingModule);
            $this->getEntityManager()->flush();

            return $marketingModule;
        }

        return $marketingModule;
    }

    public function hex2rgb($color)
    {
        // Check if the color is in RGB format
        if (preg_match('/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/', $color, $matches)) {
            // If it's already in RGB format, return the color as is
            return $color;
        } else {
            // Assume it's a hexadecimal color and convert it to RGB
            $hexColor = $color;
            $shorthand = (strlen($hexColor) == 4);
            list($r, $g, $b) = $shorthand ? sscanf($hexColor, "#%1s%1s%1s") : sscanf($hexColor, "#%2s%2s%2s");
            return 'rgb('.hexdec($shorthand ? "$r$r" : $r).','.
                        hexdec($shorthand ? "$g$g" : $g).','.
                        hexdec($shorthand ? "$b$b" : $b).')';
        }
    }

    public function deleteMarketingModule($id, $company)
    {
        $marketingModule = $this->findOneBy([
            'id' => $id,
            'company' => $company
        ]);

        if ($marketingModule) {
            $this->getEntityManager()->remove($marketingModule);
            $this->getEntityManager()->flush();

            $json = [
                'alertClass' => 'success',
                'alertMessage' => 'Marketing Module deleted successfully!',
            ];
        } else {
            $json = [
                'alertClass' => 'warning',
                'alertMessage' => 'Marketing Module not found!',
            ];
        }

        return $json;
    }

    public function getAllMarketingModulesForCustomer($query, $container, $company, $customer)
    {
        $order = array_rand(array(
            'DESC' => 'DESC',
            'ASC' => 'ASC'
        ));
    
        $column = array_rand(array(
            'mm.id' => 'mm.id',
            'mm.createdAt' => 'mm.createdAt'
        ));

        $qb = $this->getEntityManager()->createQueryBuilder();
        $entityClass = MarketingModule::class;
        $limit = (int)$query->get('limit');

        $qb->select('mm')
            ->from($entityClass, 'mm')
            ->join(Ticket::class, 't', 'WITH', 'mm.group = t.group')
            ->where('mm.isActive = :isActive')
            ->andWhere('t.customer = :userId')
            ->andWhere('t.company = :company')
            ->groupBy('mm.id')
            ->orderBy($column, $order)
            ->setParameter('isActive', 1)
            ->setParameter('company', $company)
            ->setParameter('userId', $customer)
            ->setMaxResults($limit);

        $paginator  = $container->get('knp_paginator');
        $results = $paginator->paginate(
            $qb,
            $query->get('page'),
            $limit,
            array('distinct' => false)
        );

        $paginationData = $results->getPaginationData();
        $ignoredFileds = array('company','groups','teamleads', 'users');
        $threadContext = $container->get('default.service')->objectSerializer($results, $ignoredFileds);
        
        $json['modules'] = json_decode($threadContext);
        $json['pagination_data'] = $paginationData;
        
        return $json;
    }
}
